package {{packageName}};

{{^imports.isEmpty}}
    {{#imports}}
import {{.}};
    {{/imports}}
{{/imports.isEmpty}}

/**
 * This class was auto-generated by GigaSpaces
{{#warnings}}
    * WARNING: {{.}}
{{/warnings}}
 */
{{#annotations}}
    {{&.}}
{{/annotations}}
public class {{fileName}}Document extends SpaceDocument {

    private static final long serialVersionUID = 1L;
    private static final String {{classNameUpperCase}} = "{{className}}";
{{#properties}}
    private static final String {{upperCaseName}} = "{{camelCaseName}}";
{{/properties}}


    public {{fileName}}Document() {
        super({{classNameUpperCase}});
    }

    public static SpaceTypeDescriptor getTypeDescriptor() {
        return new SpaceTypeDescriptorBuilder({{classNameUpperCase}})
                .broadcast({{broadcastObject}})
                .documentWrapperClass({{fileName}}Document.class)
{{#storageOptimized}}
                .binaryStorage()
{{/storageOptimized}}
{{#properties}}
                .addFixedProperty({{upperCaseName}}, {{typeName}}.class)
    {{#id}}
                .idProperty({{upperCaseName}}, {{autoGeneratedId}}, SpaceIndexType.{{indexType}})
    {{/id}}
    {{^id}}
        {{#routingProperty}}
                .routingProperty({{upperCaseName}}, SpaceIndexType.{{indexType}})
        {{/routingProperty}}
        {{^routingProperty}}
            {{#indexType}}
                .addPropertyIndex({{upperCaseName}}, SpaceIndexType.{{indexType}})
            {{/indexType}}
        {{/routingProperty}}
    {{/id}}
{{/properties}}
                .create();
    }

{{#properties}}
    public {{typeName}} get{{pascalCaseName}}() {
        return getProperty({{upperCaseName}});
    }

    public void set{{pascalCaseName}}({{typeName}} {{camelCaseName}}) {
        setProperty({{upperCaseName}}, {{camelCaseName}});
    }

{{/properties}}

    @Override
    public boolean equals(Object obj) {
        if (obj == this)
            return true;
        if (obj == null)
            return false;
        if (!(obj instanceof {{fileName}}Document))
            return false;

        {{fileName}}Document other = ({{fileName}}Document) obj;
{{#properties}}
        if (!this.get{{PascalCaseName}}().equals(other.get{{PascalCaseName}}())) {
            return false;
        }
{{/properties}}
        return true;
    }

}
